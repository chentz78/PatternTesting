
@ <NAME> <TagString>
@ <NAME>
@ <NAME> = (  <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal>  )  ` negation `
@ <NAME> = (  <Nonterminal>  )  ` \n  \' `
@ <NAME> = (  <Nonterminal>  )  ` < ( ) <NAME> > `
@ <NAME> = (  <Nonterminal>  )  ` \< `
@ <NAME> = (  <Nonterminal>  )  ` \> `
@ <NAME> = (  <Nonterminal>  )  ` \\` `
@ <NAME> = (  <Nonterminal>  )  ` \\\\ `
@ <NAME> = (  <Nonterminal>  ) <LAYOUT> `  `
@ <NAME> = (  & <Nonterminal>  )  `  `
@ <NAME> = (  start [ <Nonterminal> ]  )  `  `
@ <NAME> = (  <Nonterminal> a   )  `  `
@ <NAME> = (  [  ] a   )  `  `
@ <NAME> = (  \"  \" a   )  `  `
@ <NAME> = (  \'  \' a   )  `  `
@ <NAME> = (  ! [  ]  )  `  `
@ <NAME> = (  [  ] - [  ]  )  `  `
@ <NAME> = (  [  ] && [  ]  )  `  `
@ <NAME> = (  [  ] || [  ]  )  `  `
@ <NAME> = (  ( [  ] )  )  `  `
@ <NAME> = (  \" \\ " \"  )  `  `
@ <NAME> = (  \" negation \"  )  `  `
@ <NAME> = (  \" \n  \' \"  )  `  `
@ <NAME> = (  <Nonterminal> +  )  `  `
@ <NAME> = (  <Nonterminal> *  )  `  `
@ <NAME> = (  { <Nonterminal> <Nonterminal> } +  )  `  `
@ <NAME> = (  { <Nonterminal> <Nonterminal> } *  )  `  `
@ <NAME> = (  <Nonterminal> ?  )  `  `
@ <NAME> = (  ( <Nonterminal> | <Nonterminal>  )  )  `  `
@ <NAME> = (  ( <Nonterminal> <Nonterminal> )  )  `  `
@ <NAME> = (  <Nonterminal> @ 0  )  `  `
@ <NAME> = (  <Nonterminal> @ 1   )  `  `
@ <NAME> = (  <Nonterminal> @ 0 X 0  )  `  `
@ <NAME> = (  <Nonterminal> @ 0 0  )  `  `
@ <NAME> = (  <Nonterminal> $  )  `  `
@ <NAME> = (  ^ <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal> ! a   )  `  `
@ <NAME> = (  <Nonterminal> >> <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal> !>> <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal> << <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal> !<< <Nonterminal>  )  `  `
@ <NAME> = (  <Nonterminal> \\ <Nonterminal>  )  `  `
@ <NAME> = { assert (  ( )  )  `  ` ; }
@ <NAME> = { assert { filter ; } ; }
@ <NAME> = { assert { ; } ; }
@ <NAME> = { assert value (   ) { filter ; } ; }
@ <NAME> = { assert value (  ...  ) { filter ; } ; }
@ <NAME> = { assert loc (   ) { filter ; } ; }
@ <NAME> = { assert node (   ) { filter ; } ; }
@ <NAME> = { assert num (   ) { filter ; } ; }
@ <NAME> = { assert type (   ) { filter ; } ; }
@ <NAME> = { assert bag (   ) { filter ; } ; }
@ <NAME> = { assert int (   ) { filter ; } ; }
@ <NAME> = { assert rat (   ) { filter ; } ; }
@ <NAME> = { assert rel (   ) { filter ; } ; }
@ <NAME> = { assert lrel (   ) { filter ; } ; }
@ <NAME> = { assert real (   ) { filter ; } ; }
@ <NAME> = { assert tuple (   ) { filter ; } ; }
@ <NAME> = { assert str (   ) { filter ; } ; }
@ <NAME> = { assert bool (   ) { filter ; } ; }
@ <NAME> = { assert void (   ) { filter ; } ; }
@ <NAME> = { assert datetime (   ) { filter ; } ; }
@ <NAME> = { assert set (   ) { filter ; } ; }
@ <NAME> = { assert map (   ) { filter ; } ; }
@ <NAME> = { assert list (   ) { filter ; } ; }
@ <NAME> = { assert ( ) (   ) { filter ; } ; }
@ <NAME> = { assert (   ) {  } ; }
