 module <NAME>  [ & <NAME>  ]  
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  `  ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` negation ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` \n  \' ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < & <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < start [ <Nonterminal> ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [  ] a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [ \\ \  - \\ \  ] a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [ \\ \  - negation ] a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [ \\ \  - <UnicodeEscape> ] a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [ \\ \  ] a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \"  \" a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \" \\ " \" a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \" <UnicodeEscape> \" a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \" negation \" a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \" \n  \' \" a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < \'  \' a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < ( ) a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < ! [  ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [  ] - [  ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [ \\ \  - \\ \  ] - [  ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [  ] && [  ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < [  ] || [  ] <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> + <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> * <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < { <Nonterminal> <Nonterminal> } + <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < { <Nonterminal> <Nonterminal> } * <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> ? <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < ( <Nonterminal> | <Nonterminal>  ) <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < ( <Nonterminal> <Nonterminal> ) <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> @ 0 <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> @ 1  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> @ 0 X 0 <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> @ 0 0 <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> $ <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < ^ <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> ! a  <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> >> <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> !>> <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> << <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> !<< <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` < <Nonterminal> \\ <Nonterminal> <NAME> > ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` \< ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` \> ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` \\` ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  )  ` \\\\ ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = (  <Nonterminal>  ) <LAYOUT> `  ` ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert (  <Nonterminal>  )  `  ` ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert { ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  `  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  `   , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  `   \  ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , {  } , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , [  ] , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , <NAME>  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , <NAME>  * , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0 , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , /  /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / negation /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / \\ /  /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> :  > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> : < <NAME> > > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> : \\ / > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> : \\ > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / < <NAME> : negation > /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , / \\ /  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0 D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0 E + 0 D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0 .  D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0 .  E + 0 D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , . 0 D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , . 0 E + 0 D , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , true , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , false , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , \"  \" , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $ 0 0 0 0 - 0 0 - 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $ 0 0 0 0 0 0 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 0 0 0 0 , 0 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 : 0 0 : 0 0 , 0 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 0 0 0 0 , 0 0 0 + 0 0 : 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 0 0 0 0 , 0 0 0 Z $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 0 0 0 0 , 0 0 0 + 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $T 0 0 0 0 0 0 , 0 0 0 + 0 0 : 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $ 0 0 0 0 - 0 0 - 0 0 T 0 0 0 0 0 0 , 0 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , $ 0 0 0 0 - 0 0 - 0 0 T 0 0 0 0 0 0 , 0 0 0 + 0 0 : 0 0 $ , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , |  ://  | , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , | negation ://  | , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 0  r , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , 1  r 0  , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , <NAME>  <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , value <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , loc <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , node <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , num <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , type <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , bag <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , int <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , rat <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , rel <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , lrel <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , real <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , tuple <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , str <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , bool <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , void <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , datetime <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , set <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , map <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , list <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , <NAME>  . <NAME> <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , & <NAME> <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , <Nonterminal> <NAME> , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  ` , ( <Mapping>  ) , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( |  :// negation | , {  } , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ( (  <Nonterminal>  )  `  `  ... , , ) { filter ; } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert ( (  <Nonterminal>  )  `  `  , , ) {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert 0 ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert [  ] ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert # <NAME>  ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert ( <Mapping>  ) ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <it> ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert <NAME>  ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert (  <Nonterminal>  )  `  ` : (  <Nonterminal>  )  `  ` ; } ;
 module <NAME>  [ & <NAME>  ]   private ( <NAME>  ) <NAME> = (  <Nonterminal>  )  `  ` , <NAME> = { assert (  <Nonterminal>  )  ` negation ` : (  <Nonterminal>  )  `  ` ; } ;
