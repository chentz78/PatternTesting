 module <NAME>  [ & <NAME>  ]  
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  `  ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` negation ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` \n  \' ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` \< ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` \> ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` \\` ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (  ( )  )  ` \\\\ ` ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { assert [  ] ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { assert (  ) ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { assert <it> ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { assert {  } : {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  while ( {  }  ) filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  while ( {  }  ) ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  while ( {  } , {  } ) filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  do filter ; while ( {  } ) ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  for ( {  }  ) filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  if ( {  }  ) filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  if ( {  }  ) filter ; else filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { fail  ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { break  ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { continue  ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  { filter ; } } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { return filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { throw filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { insert  filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { append  filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ( { filter ; } ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = value (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = value (  ...  ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = loc (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = node (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = num (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = type (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = bag (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = int (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = rat (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = rel (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = lrel (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = real (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = tuple (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = str (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = bool (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = void (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = datetime (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = set (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = map (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = list (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ( ) (   ) { assert {  } ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = [ { filter ; } , { filter ; } .. { filter ; } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = (   ) {  } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ( { filter ; } | { filter ; } | { filter ; }  ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = type ( { filter ; } , { filter ; } ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } ( { filter ; }  , , ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } ( { filter ; }   ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } (  , , ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = <RealLiteral> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = true ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = false ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = <DateTimeLiteral> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = <RationalLiteral> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = any ( { filter ; }  ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = all ( { filter ; }  ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  }  | {  }  } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ( {  } : {  } | {  }  ) ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = [ {  }  | {  }  ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = # value ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = [ { filter ; } .. { filter ; } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = < { filter ; }  > ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = <NAME>  ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ { filter ; }  ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ {  } .. {  } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ {  } ..  ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ {  } , { filter ; } .. {  } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } . <NAME> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ <NAME> = { filter ; } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } < <NAME>  > ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } [ @ <NAME> = { filter ; } ] ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } @ <NAME> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } is <NAME> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } has <NAME> ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } + ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } * ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } ? ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ! { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = - { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = * { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = [ value ] { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } o { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } * { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } join { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } % { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } / { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } & { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } + { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } - { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } << { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } >> { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } mod { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } notin { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } in { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } >= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } <= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } < { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } > { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } == { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } != { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } ? { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  }  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  } , [  ] } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  } , (  ) } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = * {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = + {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = - {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = < {  }  > !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = type ( {  } , {  } ) !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = {  } ( {  }   ) !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = <NAME> : {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = / {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = ! {  } !:= { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  }  } := { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { {  }  } <- { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } ==> { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } <==> { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } && { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> = { filter ; } || { filter ; } ;
 module <NAME>  [ & <NAME>  ]   private ( value ) <NAME> = (  ( )  )  `  ` , <NAME> ;
